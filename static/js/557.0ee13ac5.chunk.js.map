{"version":3,"file":"static/js/557.0ee13ac5.chunk.js","mappings":"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","sources":["components/contacts/contacts.styled.jsx","redux/filter/selectors.js","redux/contacts/selectors.js","components/contacts/contacts.jsx","components/contacts/contacts-filter.jsx","components/form/contacts-form.styled.jsx","hooks/useContacts.js","components/form/contacts-form.jsx","pages/contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  list-style: none;\n  padding-left: 0;\n`;\n\nexport const ContactsItem = styled.li`\n  margin-bottom: 10px;\n`;\n\nexport const ContactText = styled.p`\n  margin-right: 10px;\n  display: inline;\n  font-size: 20px;\n  letter-spacing: 1.2px;\n`;\n","export const selectFilter = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectContactsError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { useSelector } from 'react-redux';\nimport { ContactText, ContactsItem, ContactsList } from './contacts.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { Button } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactList = () => {\n  const filtredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <ContactsList>\n        {filtredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactsItem key={id}>\n              <ContactText>\n                {name}: {number}\n              </ContactText>\n              <Button\n                type=\"button\"\n                variant=\"contained\"\n                endIcon={<DeleteIcon />}\n                style={{\n                  width: '110px',\n                  height: '27px',\n                  fontSize: '14px',\n                  padding: '5px',\n                }}\n                color=\"success\"\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                Delete\n              </Button>\n            </ContactsItem>\n          );\n        })}\n      </ContactsList>\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  return (\n    <>\n      <h4>Find contacts by name</h4>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(updateFilter(e.target.value))}\n      ></input>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  max-width: 200px;\n  gap: 10px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FieldLabel = styled.label`\n  font-size: 20px;\n`;\n","import { useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nexport const useContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const contactsError = useSelector(selectContactsError);\n\n  return {\n    contacts,\n    isLoading,\n    contactsError,\n  };\n};\n","import { Formik, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { FieldLabel, Form } from './contacts-form.styled';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { useContacts } from 'hooks/useContacts';\nimport { Button } from '@mui/material';\nimport AddIcon from '@mui/icons-material/Add';\n\nconst contactSchema = Yup.object().shape({\n  userName: Yup.string()\n    .min(2, 'Must be a word of at least 2 characters')\n    .required('Required'),\n  userNumber: Yup.string()\n    .matches(\n      /^[0-9]{3}-[0-9]{3}-[0-9]{4}$/,\n      'Must be a number format of 123-456-7890'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const { contacts } = useContacts();\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          userName: '',\n          userNumber: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={({ userName, userNumber }, actions) => {\n          const existContact = contacts.find(\n            contact => contact.name.toLowerCase() === userName.toLowerCase()\n          );\n          if (existContact) {\n            alert(`${userName} is already in contacts`);\n          } else {\n            dispatch(addContact({ name: userName, number: userNumber }));\n            actions.resetForm();\n          }\n        }}\n      >\n        <Form>\n          <FieldLabel htmlFor=\"userName\">\n            Name\n            <Field id=\"userName\" type=\"text\" name=\"userName\" />\n            <ErrorMessage name=\"userName\" />\n          </FieldLabel>\n\n          <FieldLabel htmlFor=\"userNumber\">\n            Number\n            <Field id=\"userNumber\" name=\"userNumber\" />\n            <ErrorMessage name=\"userNumber\" />\n          </FieldLabel>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            endIcon={<AddIcon />}\n            style={{ width: '169px', height: '30px' }}\n            color=\"success\"\n          >\n            Add contact\n          </Button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","import { ContactList } from 'components/contacts/contacts';\nimport { Filter } from 'components/contacts/contacts-filter';\nimport { ContactForm } from 'components/form/contacts-form';\nimport { useContacts } from 'hooks/useContacts';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const { isLoading, error, contacts } = useContacts();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {isLoading && !error && <b>Loading contacts...</b>}\n      {error ? (\n        <b>Oops, {error.toLowerCase()}! Please, try again!</b>\n      ) : (\n        <>\n          {contacts.length > 0 && (\n            <>\n              <h2>Contacts</h2>\n              <Filter />\n              <ContactList />\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n"],"names":["ContactsList","styled","_templateObject","_taggedTemplateLiteral","ContactsItem","_templateObject2","ContactText","_templateObject3","selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","selectContactsError","error","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","ContactList","filtredContacts","useSelector","dispatch","useDispatch","_jsx","_Fragment","children","map","_ref","id","number","_jsxs","Button","type","variant","endIcon","DeleteIcon","style","width","height","fontSize","padding","color","onClick","deleteContact","Filter","value","onChange","e","updateFilter","target","Form","FormikForm","FieldLabel","useContacts","contactsError","contactSchema","Yup","shape","userName","min","required","userNumber","matches","ContactForm","Formik","initialValues","validationSchema","onSubmit","actions","find","alert","concat","addContact","resetForm","htmlFor","Field","ErrorMessage","AddIcon","Contacts","_useContacts","useEffect","fetchContacts","Helmet","length"],"sourceRoot":""}